/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cejv539.ebook.actionbeans;

import com.cejv539.ebook.beans.ReportBean;
import com.cejv539.ebook.beans.SiteBean;
import java.io.Serializable;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.annotation.Resource;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.transaction.UserTransaction;
import org.apache.tools.ant.util.DateUtils;

/**
 *
 * @author arlyn.zamudio
 */
@Named
@SessionScoped
public class ReportActionBean implements Serializable {

    @Resource
    private UserTransaction userTransaction;

    @PersistenceContext
    private EntityManager entityManager;

    @Inject
    private ReportBean reportBean;

    /**
     * get Top Sales Report Details
     *
     * @return
     */
    public String getSales() {

        SimpleDateFormat dte = new SimpleDateFormat("yyyy-MM-dd");

        TypedQuery<Object[]> query;
        query = entityManager.createQuery("SELECT count(i.bookID) as bookCount,i.bookID,b.title, sum(i.price) as cost"
                + " FROM Invoicedetails i inner join i.bookID b inner join i.invoiceID inv"
                + " GROUP BY i.bookID,b.title", Object[].class);

        /*
         TypedQuery<Object[]> query;
         query = entityManager.createQuery("SELECT count(i.bookID) as bookCount,i.bookID,b.title, sum(i.price) as cost "
         + "FROM Invoicedetails i inner join i.bookID b inner join i.invoiceID inv"
         + " WHERE inv.invoiceDate >= :startDate AND inv.invoiceDate <= :endDate"
         + " GROUP BY i.bookID,b.title", Object[].class);
         query.setParameter("startDate", reportBean.getStartDate());
         query.setParameter("endDate", reportBean.getEndDate());
         */
        
        System.out.println("DATE  "+reportBean.getStartDate());
        reportBean.setTopSalesReport(query.getResultList());

        getSalesTotal();

        return "topSalesReport";
    }

    /**
     * get Top Sales Total
     *
     * @return
     */
    public void getSalesTotal() {

        TypedQuery<BigDecimal> query;
        query = entityManager.createQuery("SELECT  sum(i.invoiceTotal) as totalCost FROM Invoice i ", BigDecimal.class);

        reportBean.setTotalSales(query.getResultList().get(0));

    }

    /**
     * get Top Seller Report Details
     *
     * @return
     */
    public String getTopSeller() {

        TypedQuery<Object[]> query;
        query = entityManager.createQuery("SELECT count(i.bookID) as bookCount,i.bookID,b.title"
                + " FROM Invoicedetails i inner join i.bookID b inner join i.invoiceID inv"
                + " GROUP BY i.bookID,b.title ORDER BY bookCount DESC ", Object[].class);

        reportBean.setTopSellerReport(query.getResultList());

        return "topSellerReport";

    }

    /**
     * get Top Client Report Details
     *
     * @return
     */
    public String getTopClients() {

        TypedQuery<Object[]> query;
        query = entityManager.createQuery("SELECT i.clientID,c.firstName,c.lastName"
                + ", sum(i.invoiceTotal) as cost FROM Invoice i inner join i.clientID c"
                + " GROUP BY i.clientID,c.firstName,c.lastName"
                + " ORDER BY cost DESC", Object[].class);

        reportBean.setTopClientsReport(query.getResultList());
        getSalesTotal();


        return "topClientsReport";

    }

}
